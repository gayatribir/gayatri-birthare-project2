{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/usePrevious.js"],
  "sourcesContent": ["import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}"],
  "mappings": ";;;;;;;;AAAA,mBAAkC;AAmBnB,SAAR,YAA6B,OAAO;AACzC,MAAI,UAAM,qBAAO,IAAI;AACrB,8BAAU,WAAY;AACpB,QAAI,UAAU;AAAA,EAChB,CAAC;AACD,SAAO,IAAI;AACb;",
  "names": []
}
